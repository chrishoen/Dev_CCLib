/*==============================================================================
Description:
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include <windows.h>
#include "ccCount.h"

namespace CC
{
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************

Count::Count()
{
   // All null
   mCount    = 0;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void Count::initialize(LONG aMaxCount)
{
   mMaxCount = aMaxCount;
   mCount    = 0;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

bool Count::tryIncrement ()
{
   // Guard
   if (mCount >= mMaxCount) return false;

   LONG tOriginal = InterlockedExchangeAdd(&mCount,1);

   if (tOriginal >= mMaxCount)
   {
      InterlockedDecrement(&mCount);
      return false;
   }

   return true;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

bool Count::tryDecrement ()
{
   // Guard
   if (mCount <= 0) return false;

   LONG tOriginal = InterlockedExchangeAdd(&mCount,-1);

   if (tOriginal <= 0)
   {
      InterlockedIncrement(&mCount);
      return false;
   }

   return true;
}

}//namespace
