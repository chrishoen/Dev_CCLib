#ifndef _LFINDEX_H_
#define _LFINDEX_H_

#include <atomic>

/*==============================================================================
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************
#pragma pack( push, PACK_LFINDEX,1 )

class LFIndex
{
public:

   int mIndex;
   int mCount;

   LFIndex()
   {
      mIndex=0;
      mCount=0;
   }

   LFIndex(int aIndex,int aCount)
   {
      mIndex = aIndex;
      mCount = aCount;
   }

   void set(int aIndex,int aCount)
   {
      mIndex = aIndex;
      mCount = aCount;
   }

};


#pragma pack( pop, PACK_LFINDEX )

inline bool operator==(const LFIndex& lhs, const LFIndex& rhs)
{
   return lhs.mIndex==rhs.mIndex && lhs.mCount==rhs.mCount;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

typedef std::atomic<LFIndex> AtomicLFIndexT;

inline std::atomic<LFIndex>& AtomicLFIndex(LFIndex& aX)
{
   return *(std::atomic<LFIndex>*)&aX;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************


//******************************************************************************

#endif


#if 0

#endif