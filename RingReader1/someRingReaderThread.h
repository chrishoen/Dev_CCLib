#pragma once

/*==============================================================================
Ring buffer writer thread.
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include "risThreadsRandomThread.h"

#include "someTestRingBuffer.h"

//******************************************************************************
//******************************************************************************
//******************************************************************************

namespace Some
{

//******************************************************************************
//******************************************************************************
//******************************************************************************

class RingReaderThread : public Ris::Threads::BaseRandomThread
{
private:
   typedef Ris::Threads::BaseRandomThread BaseClass;
public:

   //******************************************************************************
   //******************************************************************************
   //******************************************************************************
   // Members.

   // Ring buffer writer.
   TestRingReader mRingReader;

   // If true then perform timer processing.
   bool mTPFlag;

   //******************************************************************************
   //******************************************************************************
   //******************************************************************************
   // Methods.

   // Constructor.
   RingReaderThread();

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods. Thread base class overloads.

   // Thread init function. This is called by the base class immedidately
   // after the thread starts running. It creates and launches the
   // child SerialMsgThread.
   void threadInitFunction() override;

   // Thread exit function. This is called by the base class immedidately
   // before the thread is terminated. It shuts down the child SerialMsgThread.
   void threadExitFunction() override;

   // Execute periodically. This is called by the base class timer.
   void executeOnTimer(int aTimerCount) override;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods. Helpers.

   // Show.
   void show();
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Global instance

#ifdef _SOMERINGREADERTHREAD_CPP_
          RingReaderThread* gRingReaderThread = 0;
#else
   extern RingReaderThread* gRingReaderThread;
#endif

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace


