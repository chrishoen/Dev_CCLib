/*==============================================================================
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include "stdafx.h"

#include <windows.h> 

#include "ccSynchLock.h"

#pragma unmanaged

namespace CC
{

//******************************************************************************
//******************************************************************************
//******************************************************************************

class SynchLock::Specific
{
public:
   SRWLOCK mSRWLock;
   CRITICAL_SECTION mCriticalSection;
};

//******************************************************************************
//******************************************************************************
//******************************************************************************

SynchLock::SynchLock() 
{
   mSpecific = new Specific;
   InitializeCriticalSectionAndSpinCount(&mSpecific->mCriticalSection, 0x80000400);
   InitializeSRWLock(&mSpecific->mSRWLock);
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

SynchLock::~SynchLock() 
{
   DeleteCriticalSection(&mSpecific->mCriticalSection);
   delete mSpecific;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void SynchLock::lock()
{
   EnterCriticalSection(&mSpecific->mCriticalSection);
   return;
   AcquireSRWLockExclusive(&mSpecific->mSRWLock);
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void SynchLock::unlock()
{
   LeaveCriticalSection(&mSpecific->mCriticalSection);
   return;
   ReleaseSRWLockExclusive(&mSpecific->mSRWLock);
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace

