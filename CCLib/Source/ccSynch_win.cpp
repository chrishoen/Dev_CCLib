/*==============================================================================
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include "stdafx.h"

#include <windows.h> 
#include <assert.h>

#include "ccSynch.h"

#pragma unmanaged

namespace CC
{

//******************************************************************************
//******************************************************************************
//******************************************************************************

class MutexSemaphore::Specific
{
public:
   SRWLOCK mSRWLock;
};

//******************************************************************************
//******************************************************************************
//******************************************************************************

MutexSemaphore::MutexSemaphore() 
{
   mSpecific = new Specific;
   InitializeSRWLock(&mSpecific->mSRWLock); 
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

MutexSemaphore::~MutexSemaphore() 
{
   delete mSpecific;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void MutexSemaphore::lock()
{
   AcquireSRWLockExclusive(&mSpecific->mSRWLock);
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void MutexSemaphore::unlock()
{
   ReleaseSRWLockExclusive(&mSpecific->mSRWLock); 
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************
//******************************************************************************

class CriticalSection::Specific
{
public:
   CRITICAL_SECTION mCriticalSection;
};

//******************************************************************************
//******************************************************************************
//******************************************************************************

CriticalSection::CriticalSection()
{
   mSpecific = new Specific;
   InitializeCriticalSectionAndSpinCount(&mSpecific->mCriticalSection, 0x80000400);
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

CriticalSection::~CriticalSection()
{
   DeleteCriticalSection(&mSpecific->mCriticalSection);
   delete mSpecific;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void CriticalSection::lock()
{
   EnterCriticalSection(&mSpecific->mCriticalSection);
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void CriticalSection::unlock()
{
   LeaveCriticalSection(&mSpecific->mCriticalSection);
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace

