#pragma once

/*==============================================================================

Lock Free Pointer Queue Class Template. 

This implements a pointer queue. It uses the lock free value queue template
and provides some methods that simplify usage.

==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include "ccLFValueQueue.h"

//******************************************************************************
//******************************************************************************
//******************************************************************************

namespace CC
{

//******************************************************************************
//******************************************************************************
//******************************************************************************

template <class Element>
class LFPointerQueue : public CC::LFValueQueue <Element>
{
public:

   typedef CC::LFValueQueue <Element> BaseClass;

   //******************************************************************************
   //******************************************************************************
   //******************************************************************************
   // These simplify queue access.

   bool writePtr (Element aValue)
   {
      return BaseClass::tryWrite(aValue);
   }

   Element readPtr ()
   {
      void* tValue;
      if (!BaseClass::tryRead(&tValue)) return 0;
      return tValue;
   }
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace

