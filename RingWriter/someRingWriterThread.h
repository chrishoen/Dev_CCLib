#pragma once

/*==============================================================================
Ring buffer writer thread.
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include "risThreadsRandomThread.h"

#include "ccRingBuffer.h"
#include "someTestRingBuffer.h"
#include "someTestTester.h"

//******************************************************************************
//******************************************************************************
//******************************************************************************

namespace Some
{

//******************************************************************************
//******************************************************************************
//******************************************************************************

class RingWriterThread : public Ris::Threads::BaseRandomThread
{
public:
   typedef Ris::Threads::BaseRandomThread BaseClass;

   //******************************************************************************
   //******************************************************************************
   //******************************************************************************
   // Members.

   // Ring buffer writer.
   CC::RingBufferWriter          mRingWriter;

   // Test ring buffer tester.
   Some::TestTester              mRingTester;

   //******************************************************************************
   //******************************************************************************
   //******************************************************************************
   // Methods.

   // Constructor.
   RingWriterThread();

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Thread base class overloads.

   // Thread init function. This is called by the base class immedidately 
   // after the thread starts running. It creates and launches the 
   // child SerialMsgThread.
   void threadInitFunction() override;

   // Thread exit function. This is called by the base class immedidately
   // before the thread is terminated. It shuts down the child SerialMsgThread.
   void threadExitFunction() override;

   // Execute periodically. This is called by the base class timer.
   void executeOnTimer(int aTimerCount) override;

};

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Global instance

#ifdef _SOMERINGWRITERTHREAD_CPP_
          RingWriterThread* gRingWriterThread = 0;
#else
   extern RingWriterThread* gRingWriterThread;
#endif

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace


