/*==============================================================================
Description:
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include "prnPrint.h"

#include "someBlock2.h"

namespace Some
{

//******************************************************************************
//******************************************************************************
//******************************************************************************

CC::LongTermBlockPool Block2A::mLongTermBlockPool;
int Block2A::mMemoryType = 1;

void Block2A::initializeMemory(int aAllocate)
{
   int tBlockSize = sizeof(Block2A);
   mLongTermBlockPool.initialize(aAllocate, tBlockSize);
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

Block2A::Block2A()
{
   Prn::print(0, 0, "Block2A::Block2A");
}

Block2A::~Block2A()
{
   Prn::print(0, 0, "Block2A::~Block2A");
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
Block2A* Block2A::create()
{
   // Allocate a block from the block pool
   Block2A* tPointer = (Block2A*)mLongTermBlockPool.get();
   // Call the constructor on the allocated block using placement new
   tPointer = new(tPointer)Block2A;
   // Return the allocated block
   return tPointer;
}

//******************************************************************************
//******************************************************************************
//******************************************************************************
void Block2A::destroy(Block2A* aPointer)
{
   // Call the block's destructor
   aPointer->~Block2A();
   // Deallocate the block from the block pool
   mLongTermBlockPool.put(aPointer);
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

   Block2B::Block2B()
{
   Prn::print(0, 0, "Block2B::Block2B");
}

Block2B::~Block2B()
{
   Prn::print(0, 0, "Block2B::~Block2B");
}

   
}//namespace