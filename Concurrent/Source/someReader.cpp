/*==============================================================================
Description:
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include <prnPrint.h>

#include "someShare.h"
#include "LFIntQueue.h"
#include "RisIntQueue.h"
#include "someReader.h"

namespace Some
{

//******************************************************************************
//******************************************************************************
//******************************************************************************

Reader::Reader()
{
   initialize();
}

void Reader::initialize()
{
   mPassCount = 0;
   mFailCount = 0;
   mCodeSum   = 0;
}

void Reader::finalize()
{
}

//******************************************************************************
//******************************************************************************
//******************************************************************************

void Reader::show()
{
   Prn::print(0,"Reader.mPassCount %llu",mPassCount);
   Prn::print(0,"Reader.mFailCount %llu",mFailCount);
   Prn::print(0,"Reader.mCodeSum   %llu",mCodeSum);
   Prn::print(0,"");
}
  
//******************************************************************************
//******************************************************************************
//******************************************************************************

bool Reader::readOne1()
{
   IntMessage tMsg;

   if (LFIntQueue::tryRead(&tMsg.aint()))
   {
      mPassCount++;
      mCodeSum += tMsg.mCode;
      return true;
   }
   else
   {
      if (mFailFlag) mFailCount++;
      return false;
   }
}
   
//******************************************************************************
//******************************************************************************
//******************************************************************************

bool Reader::readOne2()
{
   IntMessage tMsg;

   if (RisIntQueue::tryRead(&tMsg.aint()))
   {
      mPassCount++;
      mCodeSum += tMsg.mCode;
      return true;
   }
   else
   {
      if (mFailFlag) mFailCount++;
      return false;
   }
}
   
//******************************************************************************
//******************************************************************************
//******************************************************************************

bool Reader::readOne()
{
   switch (gShare.mMode)
   {
   case 1: return readOne1();
   case 2: return readOne2();
   }
   return false;
}
   
//******************************************************************************
//******************************************************************************
//******************************************************************************

void Reader::read(int aNumReads)
{
   if (aNumReads > 0)
   {
      mFailFlag=true;
      for (int i = 0; i < aNumReads; i++)
      {
         readOne();
      }
   }
   else
   {
      mFailFlag=false;
      while(true)
      {
         if (!readOne())
         {
            return;
         }
      }
   }
}
   
}//namespace